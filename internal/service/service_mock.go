// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFiler is a mock of Filer interface.
type MockFiler struct {
	ctrl     *gomock.Controller
	recorder *MockFilerMockRecorder
}

// MockFilerMockRecorder is the mock recorder for MockFiler.
type MockFilerMockRecorder struct {
	mock *MockFiler
}

// NewMockFiler creates a new mock instance.
func NewMockFiler(ctrl *gomock.Controller) *MockFiler {
	mock := &MockFiler{ctrl: ctrl}
	mock.recorder = &MockFilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFiler) EXPECT() *MockFilerMockRecorder {
	return m.recorder
}

// GetPath mocks base method.
func (m *MockFiler) GetPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPath indicates an expected call of GetPath.
func (mr *MockFilerMockRecorder) GetPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPath", reflect.TypeOf((*MockFiler)(nil).GetPath))
}

// ReadWithCheck mocks base method.
func (m *MockFiler) ReadWithCheck() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadWithCheck")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadWithCheck indicates an expected call of ReadWithCheck.
func (mr *MockFilerMockRecorder) ReadWithCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadWithCheck", reflect.TypeOf((*MockFiler)(nil).ReadWithCheck))
}
